{"title":"网络信息安全","uid":"4eed6726322cbd1240d9eae47dec8b49","slug":"网络信息安全","date":"2023-02-23T08:53:00.000Z","updated":"2023-02-23T09:07:37.301Z","comments":true,"path":"api/articles/网络信息安全.json","keywords":null,"cover":[],"content":"<h1 id=\"密码学\"><a href=\"#密码学\" class=\"headerlink\" title=\"密码学\"></a>密码学</h1><h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h3 id=\"密码学基本术语\"><a href=\"#密码学基本术语\" class=\"headerlink\" title=\"密码学基本术语\"></a>密码学基本术语</h3><p>​\t\tKey：密钥，对加密和解密过程进行控制的参数。</p>\n<p>​\t\tCipher：加密方法。</p>\n<p>​\t\tEncipher：加密。将明文转换为密文。</p>\n<p>​\t\tDecipher：解密。将密文还原成明文。</p>\n<p>​\t\tPlaintext：明文。</p>\n<p>​\t\tCiphertext：密文。</p>\n<p>​\t\t大多数加密算法、解密算法是公开的。密钥来保证算法的安全性。密钥是不公开的。</p>\n<p>​\t\t<strong>理论安全</strong>：攻击者无论截获多少密文，都无法得到足够的信息来唯一地决定明文。Shannon证明，如果想要达到理论安全，密钥长度要大于等于明文长度，并且一次一密，用完即丢。这种是不现实的。</p>\n<p>​\t\t<strong>实际安全</strong>：如果攻击者有无限资源，任何密码系统都是可以被破译的，但是在有限资源内，攻击者都不能通过系统的分析方法来破解系统，则称这个系统是计算上安全的。现有的商用密码都是实际安全的。</p>\n<p>​\t\t加密系统可以用数学符号来描述。</p>\n<p>​\t\tS &#x3D; {P,C,K,E,D}。这五个分别是，明文空间，密文空间，密钥空间，加密变换，解密变换。如果对数字加密，那明文空间就是0~9。</p>\n<p>​\t\t<strong>对称式密码体制：</strong>加密和解密所用密钥是相同的。开放性差。</p>\n<p>​\t\t<strong>非对称密码体制：</strong>加密和解密是分开的，开放性好。</p>\n<p>​\t\t<strong>序列密码体制：</strong>加密以比特为单位，密文不仅与算法和密钥有关，也和明文位置有关。</p>\n<p>​\t\t<strong>分组密码体制：</strong>加密以组为单位，与明文位置无关。明文长度和密文长度相同。</p>\n<p>​\t\t<strong>确定型密码体制：</strong>明文和密钥确定后，密文也确定了。</p>\n<p>​\t\t<strong>概率密码体制：</strong>明文和密钥确定后，密文通过客观随机因素从密文集合中产生，密文形式不确定。</p>\n<p>​\t\t<strong>单向函数型密码体制：</strong>适用于不需要解密的场合，容易将明文加密成密文。如哈希函数。</p>\n<p>​\t\t<strong>双向变换型密码体制：</strong>加密解密可逆。</p>\n<h3 id=\"对称密码系统的模型\"><a href=\"#对称密码系统的模型\" class=\"headerlink\" title=\"对称密码系统的模型\"></a>对称密码系统的模型</h3><p>​\t\t收发双方必须在某种安全的形式下获得密钥并必须保证密钥的安全。</p>\n<p>​\t\t基本要求：强加密算法，只有双方知道的密钥。因此必须有一个安全的途径或信道分发密钥。</p>\n<p>​\t\t将明文转换为密文和操作类型：代换和置换。代换是用另一个元素来代替，置换是对顺序进行重新排序。</p>\n<p>​\t\t对加密信息攻击的类型：</p>\n<p>​\t\t唯密文攻击：捕获密文。</p>\n<p>​\t\t已知明文攻击：一段时间明文解密，攻击者得到一些明文密文对应关系，仍然不能破解。</p>\n<p>​\t\t选择明文攻击：对于已知明文攻击有了选择性。攻击者可以主动选择明文询问，得到需要的明文密文。</p>\n<p>​\t\t选择密文攻击：发送密文，准备密文更难。</p>\n<p>​\t\t选择文本攻击：包括了第三第四条。</p>\n<h2 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h2><p>​\t\tDES(数据加密标准)的分组和密钥是64位和56位，扩展了Feistel密码结构。</p>\n<p>​\t\t混淆：希望密文和密钥的关系尽量复杂。</p>\n<p>​\t\t扩散：明文统计结构扩散消失到大批密文统计特性中，例如改变明文1bit，密文多余1bit改变。</p>\n<h3 id=\"Feistel结构\"><a href=\"#Feistel结构\" class=\"headerlink\" title=\"Feistel结构\"></a>Feistel结构</h3><p>​\t\tFeistel结构是对称的，除第一轮外，每一轮的左边都是上一轮右边的输出(代换)，右边则是Ri &#x3D; Li-1 ^ F(ki , Ri-1)。典型轮数是16轮。128位是常用密钥长度。解密时，输入密文，以相反的次序使用密钥。</p>\n<h3 id=\"DES流程\"><a href=\"#DES流程\" class=\"headerlink\" title=\"DES流程\"></a>DES流程</h3><p>​\t\t输入明文和密钥，根据初始置换表进行初始置换，将指定位置i上的值置换到指定位置j上(在原有明文上打乱顺序)。恢复时根据逆置换。</p>\n<p>​\t\t扩充置换，根据扩充置换表将原有数据扩充，DES中是左右部各扩充8位。(这一步完成了混淆和<strong>扩散</strong>)。</p>\n<p>​\t\t56位密钥分为左右两部分，先循环左移，再通过P置换和收缩得到48位子密钥。</p>\n<p>​\t\t将32位右半部和48-bit子密钥做如下操作(F函数)：</p>\n<p>​\t\t使用扩充置换表E，将32位右半部扩充成48位。</p>\n<p>​\t\t与子密钥异或。</p>\n<p>​\t\t48位结果送进8个替换盒(将6位映射成4位)，得到32位，再用32位置换表P进行置换。S盒映射，外侧1和6位用作行选择，其余用作列选择。例如110011，定位于第三行第九列，作用于盒8，则得到的数据是12，也就是1100。</p>\n<p>​\t\t之后与上一轮的左部进行异或，得到下一轮的右部。</p>\n<h2 id=\"多重加密\"><a href=\"#多重加密\" class=\"headerlink\" title=\"多重加密\"></a>多重加密</h2><p>​\t\t穷举攻击对于DES是可行的。</p>\n<p>​\t\t对称密码有5种工作模式。</p>\n<h3 id=\"双重DES\"><a href=\"#双重DES\" class=\"headerlink\" title=\"双重DES\"></a>双重DES</h3><p>​\t\t先用K1、K2加密，再用K2、K1解密，密钥长度是112位。但用中途相遇攻击能破解，实际上破解复杂度并没有因为密钥复杂度的提升而提升。可以穷举K1,K2，中间值X &#x3D; Ek1(M) &#x3D; Dk2(C)。</p>\n<p>​\t\t<img src=\"../images/双重DES.png\"></p>\n<h3 id=\"三重DES\"><a href=\"#三重DES\" class=\"headerlink\" title=\"三重DES\"></a>三重DES</h3><ul>\n    <li>用两个密钥进行E-D-E</li>\n    <li>用三个密钥进行E-D-E</li>\n</ul>\n\n<h3 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h3><p>​\t\t高级加密标准。</p>\n<h3 id=\"加密模式\"><a href=\"#加密模式\" class=\"headerlink\" title=\"加密模式\"></a>加密模式</h3><p>​\t\t1.电子密码本模式(ECB)，分组之后用同一密钥进行加密，相同明文得到相同密文。</p>\n<p>​\t\t2.密文分组链接模式(CBC)，加密输入是当前明文和前一组密文进行异或，之后再用密钥加密。第一组需要有一个初始向量和初始明文进行异或。解密是用密文与密钥作用，之后和前一组密文异或。<strong>IV不能明文传送给接收方。</strong>因为DES是有扩散性和混淆的，没有办法通过改变密文来改变明文里的指定比特，因为扩散性，这样就知道密文被破坏了。我们要阻止攻击者对指定比特进行改变，例如攻击者把你的薪水50000改成50(😀)。但明文混乱，就能识别出来密文被改变(薪水变成500ab一眼真)。如果攻击者获得IV，就能直接对第一组明文进行指定比特改变(因为是异或操作)。</p>\n<p>​\t\t3.密码反馈模式(CFB)，将DES转化成流密码(逐比特)。优点是转换成流密码。缺点是如果工作出现差错，例如C1错，解密会导致P1错，而C1又要注入到下一步P2的解密，就会导致后面的明文解密全部出错。也就是比特差错会传播。</p>\n<p>​\t\t4.输出反馈模式(OFB)，不同于CFB，OFB是加密函数的输出到下一次加密，CFB是密文输出到下一轮加密。即使C1错，只会影响到P1，防止比特差错的传播。但缺点也很明显，更容易受到报文流篡改攻击。通过修改密文，可以修改指定比特，对明文中的某些比特进行改变。(和CBC很像)为什么CFB不容易受影响，是因为CFB的比特差错会传播，C1被篡改会影响后续。</p>\n<p>​\t\t5.计数器模式(CTR)，和OFB很像，但加密的是计数器的值。应用于高速网络，因为这个方向可以并行，非常高效。不重复使用密钥和计数器值。</p>\n<h2 id=\"单向函数\"><a href=\"#单向函数\" class=\"headerlink\" title=\"单向函数\"></a>单向函数</h2><p>​\t\t给x容易求y，给y不容易推x。</p>\n<p>​\t\t单项陷井门函数，除非给陷门，不然给x容易求y，给y不容易推x。可以类比，有x求y是加密，有y推x是解密，暗门就是密钥。</p>\n<h2 id=\"公钥密码思想\"><a href=\"#公钥密码思想\" class=\"headerlink\" title=\"公钥密码思想\"></a>公钥密码思想</h2><p>​\t\t对称密码体制的问题：</p>\n<p>​\t\t加解密能力捆绑在一起。</p>\n<p>​\t\t密钥更换、传递和交换需要可靠信道，密钥分发困难。</p>\n<p>​\t\t如果有N个用户，需要N(N-1)&#x2F;2个密钥。</p>\n<p>​\t\t无法满足两个不相识的人之间的通信，因为在通信之前需要有一模一样的密钥。(根本问题)</p>\n<p>​\t\t不能实现数字签名。</p>\n<p>​\t\t非对称的特点：</p>\n<p>​\t\t加解密能力分开。</p>\n<p>​\t\t密钥分发简单。</p>\n<p>​\t\t保存密钥量大大减少，N个用户只需要N个。</p>\n<p>​\t\t满足不相识的人之间保密通信。</p>\n<p>​\t\t实现数字签名。</p>\n<p>​\t\t公钥算法的步骤：</p>\n<p>​\t\t每个用户产生一对密钥，用来加密解密。</p>\n<p>​\t\t将公钥公开，另一个密钥私有，每个用户可以拥有若干其他用户的公钥。</p>\n<p>​\t\tBob发消息给Alice，就要用Alice的公钥加密。Alice收到消息后，用自己的私钥解密，其他人均不能解密。</p>\n<p>​\t\t需要认证时，示证方用自己的私钥加密消息(签名)。验证方用示证方的公钥解密(验证)。就可以证明发送方的身份。</p>\n<p>​\t\t加密和认证结合起来，实现了保密性和认证。</p>\n<p>​\t\t公钥算法应用：加解密，签名，给对称式加密输送密钥。</p>\n<p>​\t\t对编码系统的要求：</p>\n<p>​\t\t产生一对密钥，容易。</p>\n<p>​\t\t加解密，较容易。</p>\n<p>​\t\t知道公钥(Ke)算私钥(Kd)，不行。</p>\n<p>​\t\t不知道私钥，其他都知道，也不能算明文。</p>\n<p>​\t\tD(E(m)) &#x3D; E(D(m))。</p>\n<p>​\t\t公钥密码的分析：</p>\n<p>​\t\t公钥密码易受穷举密钥攻击，方法是用长密钥。同时希望便于加解密，又需要密钥短，所以目前仅限于密钥管理和签名。</p>\n<p>​\t\t从算法上分析从公钥算出私钥，并没有证明不可行，所以值得怀疑。</p>\n<p>​\t\t穷举消息攻击，攻击者用公钥对所有可能的消息加密，与密文匹配。可以在消息后附加随机数。</p>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><p>​\t\t流程：</p>\n<p>​\t\t随机选择两个大素数p，q。</p>\n<p>​\t\t计算公开模式n &#x3D; p*q。</p>\n<p>​\t\t计算欧拉函数φ(n) &#x3D; (p-1)(q-1)。</p>\n<p>​\t\t选择一个与φ(n) 互素的数，作为e或d。</p>\n<p>​\t\t根据扩展Euclid算法，求e或d的乘法逆元，即ed mod φ(n) &#x3D; 1。</p>\n<p>​\t\t加密，C&#x3D;M^e mod n。</p>\n<p>​\t\t解密, M &#x3D; C^d mod n &#x3D; (M^e mod n)^d mod n &#x3D; M</p>\n<h2 id=\"公钥分配\"><a href=\"#公钥分配\" class=\"headerlink\" title=\"公钥分配\"></a>公钥分配</h2><p>​\t\t公钥算法计算开销大，而且需要正确拿到对方的公钥。</p>\n<p>​\t\t公开广播最大的问题就在于任何人都可以伪造公钥的发布。</p>\n<p>​\t\t有几种方式：公开广播，公开可访问目录，公钥授权，公钥证书。</p>\n<p>​\t\t公开可访问目录的私钥一旦丢失，攻击者就可以假冒任何通信方。</p>\n<h3 id=\"公钥授权\"><a href=\"#公钥授权\" class=\"headerlink\" title=\"公钥授权\"></a>公钥授权</h3><p>​\t\t公钥授权机构发送Request和时间戳的原因：A给机构的信息是明文传送，可以被截获并改动。如果攻击者改动，要C的公钥，A和机构是不知道的。所以传回Request是防止篡改攻击。时间戳是保证B公钥更新后，私钥可能泄露，机构回传消息可能被捕获，隔一段时间A又要和B通信，攻击者可以拦截机构返回的消息，重放上次时间的消息，进行重放攻击。</p>\n<p>​\t\tN1,N2的意义：进行认证。因为任何一个用户都可以申请A的公钥并向A发送消息。A用B的公钥加密发送N1,B用A的公钥加密发送N1认证，并发送N2，A接收后再用B的公钥加密发回N2证明自己是A。</p>\n<p>​\t\t缺点：PKA要实时在线。PKA是系统的瓶颈。</p>\n<img src=\"../images/公钥授权.png\">\n\n<h3 id=\"公钥证书\"><a href=\"#公钥证书\" class=\"headerlink\" title=\"公钥证书\"></a>公钥证书</h3><p>​\t\t使得不通过实时访问PKA完成公钥交换。CA，证书授权中心，CA用自己的私钥签署证书后就能下线。双方拿到各自的证书后，想要通信，直接发送各自的证书，然后用CA的公钥解密证书，解密成功，证明证书合法，之后就可以获取对方公钥进行通信。</p>\n<h2 id=\"公钥分配传统密码\"><a href=\"#公钥分配传统密码\" class=\"headerlink\" title=\"公钥分配传统密码\"></a>公钥分配传统密码</h2><p>​\t\t在实际中，往往是公钥算法和传统密码结合的方式。</p>\n<h3 id=\"简单的密钥分配\"><a href=\"#简单的密钥分配\" class=\"headerlink\" title=\"简单的密钥分配\"></a>简单的密钥分配</h3><p>​\t\tA产生公钥私钥，将公钥和自己的ID发送给B，B用A的公钥发送一个秘密密钥。容易遭受中间人攻击。可以将A的消息拦截，篡改公钥后发送给B。之后又将B的消息拦截，用自己的私钥解密，看到KS，之后再用KUa加密B的消息发给A，A和B的通信就暴露在攻击者的观察下了。</p>\n<h3 id=\"保密、真实的密钥分配\"><a href=\"#保密、真实的密钥分配\" class=\"headerlink\" title=\"保密、真实的密钥分配\"></a>保密、真实的密钥分配</h3><p>​\t\t假设双方通过安全的方法拿到对方的公钥。</p>\n<p>​\t\t安全漏洞：第四条消息可以重放。攻击者捕获第四条消息，会话密钥过一段时间就会泄露，Ks就会暴露。可以把3，4消息进行合并(加一个随机数)。</p>\n<h3 id=\"Diffie-Hellman密钥交换\"><a href=\"#Diffie-Hellman密钥交换\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换\"></a>Diffie-Hellman密钥交换</h3><p>​\t\t是一种公钥分发机制。不能抵抗中间人攻击。</p>\n<h3 id=\"EIGamal\"><a href=\"#EIGamal\" class=\"headerlink\" title=\"EIGamal\"></a>EIGamal</h3><p>​\t\t基于DLP的概率密码系统。明文密钥一样，生成的密文也不一样。缺点是传输的密文是明文的2倍。</p>\n<h2 id=\"消息认证和哈希函数\"><a href=\"#消息认证和哈希函数\" class=\"headerlink\" title=\"消息认证和哈希函数\"></a>消息认证和哈希函数</h2><p>​\t\t消息认证是验证消息完整性的，确保收到数据和发送时一样，且发送方声称的身份是真实的。</p>\n<h3 id=\"帧校验序列\"><a href=\"#帧校验序列\" class=\"headerlink\" title=\"帧校验序列\"></a>帧校验序列</h3><p>​\t\t每个消息附加一个FCS，FCS和加密函数执行的顺序很重要。这是为了解决明文可能难以识别的情况。</p>\n<h3 id=\"消息验证码\"><a href=\"#消息验证码\" class=\"headerlink\" title=\"消息验证码\"></a>消息验证码</h3><p>​\t\t独立使用MAC，需要有一个秘密密钥。不可以实现不可否认性和机密性。实现了认证性和完整性。不提供数字签名！</p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>​\t\t<img src=\"/../images/image-20211103140301850.png\" alt=\"image-20211103140301850\"></p>\n<p>​\t\t不需要密钥，任何人都可以计算。\t\t</p>\n<p>​\t\t见PPT中第一个图，实现了机密性和一定程度的认证性。不能实现不可否认性。</p>\n<p>​\t\t第二个图，没有实现机密性。接收方自己计算哈希值，和解密后的哈希值比较。在本例中，H必须加密，防止M和H被篡改。攻击者可以篡改M，计算H‘后替换H。</p>\n<p>​\t\t第三个图，发送方计算H后用自己私钥加密，之后并上M发给接收方。接收方用发送方公钥解密。实现不可否认性。</p>\n<p>​\t\t<img src=\"/../images/image-20211103140516790.png\" alt=\"image-20211103140516790\"></p>\n<p>​\t\t<strong>第四个图</strong>，实现了保密性(对称式加密)、认证性，不可否认性(数字签名)、消息完整性(数字签名和散列函数)。我们很少用KRa(私钥)直接加密明文，因为公钥算法开销非常大，而哈希值(128bit)是固定长度。而且哈希函数抗碰撞性好，明文不一样，哈希值绝大多数情况下不同，如果有，也很难用数学方法找到，所以近似看成一对一，所以才有不可否认性。</p>\n<p>​\t\t第五种，如果我们提前协商好一个S，接收方就可以认为是指定发送方发送的。没有实现不可否认性。但S是单向的，可以重复使用。</p>\n<p>​\t\t第六种相比第五种，对M进行了加密。</p>\n<h3 id=\"数字签名和认证协议\"><a href=\"#数字签名和认证协议\" class=\"headerlink\" title=\"数字签名和认证协议\"></a>数字签名和认证协议</h3><p>​\t\t数字签名可以不是实时的。</p>\n<p>​\t\t认证服务包括身份认证和报文认证。</p>\n<p>​\t\tPPT中的EIGamal的数字签名。</p>\n<h2 id=\"Kerberos和X-509\"><a href=\"#Kerberos和X-509\" class=\"headerlink\" title=\"Kerberos和X.509\"></a>Kerberos和X.509</h2><p>​\t\tKerberos，提供一个集中的授权服务器负责用户和服务器之间的身份认证。仅仅依赖对称加密体制。</p>\n<p>​\t\t用户和服务器都需要去Kerberos服务器注册。服务器和AS共享对称式密钥，AS和用户共享口令。</p>\n<h3 id=\"TGS\"><a href=\"#TGS\" class=\"headerlink\" title=\"TGS\"></a>TGS</h3><p>​\t\t最初是用户和AS共享一个密钥，TGS和V共享一个，TGS和AS共享一个。AS传回给用户的票据是用TGS和AS的密钥加密的。TS5+1是用户C对V的一个认证。</p>\n<h3 id=\"X-509\"><a href=\"#X-509\" class=\"headerlink\" title=\"X.509\"></a>X.509</h3><p>​\t\t证书不可以伪造，因为改了之后你没有私钥无法还原。</p>\n","feature":true,"text":"密码学第二章密码学基本术语​ Key：密钥，对加密和解密过程进行控制的参数。 ​ Cipher：加密方法。 ​ Encipher：加密。将明文转换为密文。 ​ Decipher：解密。将密文还原成明文。 ​ Plaintext：明文。 ​ Ciphertext：密文。 ​ 大多数...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"},{"name":"网络安全","slug":"网络安全","count":1,"path":"api/tags/网络安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81%E5%AD%A6\"><span class=\"toc-text\">密码学</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0\"><span class=\"toc-text\">第二章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">密码学基本术语</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">对称密码系统的模型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DES\"><span class=\"toc-text\">DES</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Feistel%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Feistel结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DES%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">DES流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">多重加密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E9%87%8DDES\"><span class=\"toc-text\">双重DES</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E9%87%8DDES\"><span class=\"toc-text\">三重DES</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AES\"><span class=\"toc-text\">AES</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">加密模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%90%91%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">单向函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">公钥密码思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RSA\"><span class=\"toc-text\">RSA</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AC%E9%92%A5%E5%88%86%E9%85%8D\"><span class=\"toc-text\">公钥分配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AC%E9%92%A5%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">公钥授权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AC%E9%92%A5%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">公钥证书</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AC%E9%92%A5%E5%88%86%E9%85%8D%E4%BC%A0%E7%BB%9F%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">公钥分配传统密码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%88%86%E9%85%8D\"><span class=\"toc-text\">简单的密钥分配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AF%86%E3%80%81%E7%9C%9F%E5%AE%9E%E7%9A%84%E5%AF%86%E9%92%A5%E5%88%86%E9%85%8D\"><span class=\"toc-text\">保密、真实的密钥分配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">Diffie-Hellman密钥交换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EIGamal\"><span class=\"toc-text\">EIGamal</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E5%92%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">消息认证和哈希函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%A7%E6%A0%A1%E9%AA%8C%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">帧校验序列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">消息验证码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">散列函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">数字签名和认证协议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Kerberos%E5%92%8CX-509\"><span class=\"toc-text\">Kerberos和X.509</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TGS\"><span class=\"toc-text\">TGS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#X-509\"><span class=\"toc-text\">X.509</span></a></li></ol></li></ol></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"SQL","uid":"6fc8774f334f99b8964d2d8c2cdc313c","slug":"SQL","date":"2023-02-23T08:48:00.000Z","updated":"2023-02-23T09:08:08.266Z","comments":true,"path":"api/articles/SQL.json","keywords":null,"cover":null,"text":"基于MySQL的极入门笔记简介DB DBMS SQL之间的关系： ​ DB是Data Base，是数据库的缩写，在硬盘上以文件的形式存在。DBMS是Data Base Management System（数据库管理系统）的缩写，例如MySQL、Oracle、DB2等就是一个DBM...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"SQL","slug":"SQL","count":1,"path":"api/tags/SQL.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}