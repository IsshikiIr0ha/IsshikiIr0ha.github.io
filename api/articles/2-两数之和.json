{"title":"2.两数之和","uid":"ccde5a49b40a5476a862c22787b0daae","slug":"2-两数之和","date":"2023-02-25T14:50:00.000Z","updated":"2023-02-25T14:56:45.249Z","comments":true,"path":"api/articles/2-两数之和.json","keywords":null,"cover":[],"content":"<h1 id=\"2-两数之和\"><a href=\"#2-两数之和\" class=\"headerlink\" title=\"2.两数之和\"></a>2.两数之和</h1><p>题目：给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><img src=\"../images/pasted-0.png\" alt=\"upload successful\"></p>\n<p>分析：简单题，按所给示例，因为是逆序存储，所以我们使用尾插法，将每一位的数值计算出来，mod 10看该结点应该存储什么数字，sum / 10看是否有对下一位进行进位。千万别漏掉最后一位的进位。<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">class Solution &#123;\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;\n        ListNode* head &#x3D; nullptr,*tail &#x3D; nullptr;\n        int carry &#x3D; 0;\n        while(l1 || l2)&#123; &#x2F;&#x2F;还没遍历完链表\n            int x1 &#x3D; l1 ? l1-&gt;val : 0;\n            int x2 &#x3D; l2 ? l2-&gt;val : 0;\n            int sum &#x3D; x1 + x2 + carry;\n            if(head &#x3D;&#x3D; nullptr)&#123;&#x2F;&#x2F;没有头结点先创造\n                head &#x3D; new ListNode(sum % 10);\n                tail &#x3D; head;\n            &#125;\n            else&#123;\n                tail-&gt;next &#x3D; new ListNode(sum % 10);\n                tail &#x3D; tail-&gt;next;\n            &#125;\n            if(l1)&#123;\n                l1 &#x3D; l1-&gt;next;\n            &#125;\n            if(l2)&#123;\n                l2 &#x3D; l2-&gt;next;\n            &#125;\n            carry &#x3D; sum &#x2F;10;\n        &#125;\n        if(carry &gt; 0)&#123;&#x2F;&#x2F;最后一次运算的进位不能漏\n            tail-&gt;next &#x3D; new ListNode(carry);\n        &#125;\n        return head;\n    &#125;\n&#125;;</code></pre></p>\n","text":"2.两数之和题目：给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 分析：简单题，按所给示例，因为...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","count":4,"path":"api/tags/Leetcode.json"},{"name":"链表","slug":"链表","count":3,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">2.两数之和</span></a></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"mapped":true,"prev_post":{"title":"环形链表题","uid":"7e07234faada42c308f491eefec54e74","slug":"环形链表题","date":"2023-02-25T15:05:00.000Z","updated":"2023-02-25T23:48:24.132Z","comments":true,"path":"api/articles/环形链表题.json","keywords":null,"cover":[],"text":"141.环形链表I，142.环形链表II141.环形链表I给你一个链表的头节点 head ，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","count":4,"path":"api/tags/Leetcode.json"},{"name":"链表","slug":"链表","count":3,"path":"api/tags/链表.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}}},"next_post":{"title":"网络信息安全","uid":"4eed6726322cbd1240d9eae47dec8b49","slug":"网络信息安全","date":"2023-02-23T08:53:00.000Z","updated":"2023-02-23T09:07:37.301Z","comments":true,"path":"api/articles/网络信息安全.json","keywords":null,"cover":[],"text":"密码学第二章密码学基本术语​ Key：密钥，对加密和解密过程进行控制的参数。 ​ Cipher：加密方法。 ​ Encipher：加密。将明文转换为密文。 ​ Decipher：解密。将密文还原成明文。 ​ Plaintext：明文。 ​ Ciphertext：密文。 ​ 大多数...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"},{"name":"网络安全","slug":"网络安全","count":1,"path":"api/tags/网络安全.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}}}}