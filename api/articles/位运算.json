{"title":"几道位运算的题","uid":"115e88fbdb7de27d1adaee0a1c94eec9","slug":"位运算","date":"2023-03-12T11:36:00.000Z","updated":"2023-03-12T12:04:50.915Z","comments":true,"path":"api/articles/位运算.json","keywords":null,"cover":[],"content":"<h1 id=\"Leetcode-231-2的幂\"><a href=\"#Leetcode-231-2的幂\" class=\"headerlink\" title=\"Leetcode 231 2的幂\"></a>Leetcode 231 2的幂</h1><p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p>\n<p><img src=\"../images/image-20230312193833137.png\" alt=\"image-20230312193833137\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool isPowerOfTwo(int n) &#123;\n        if(n &lt;&#x3D; 0)&#123;\n            return false;\n        &#125;\n        return (n &amp; (n-1)) &#x3D;&#x3D; 0;\n    &#125;</code></pre>\n<p>时间复杂度：o(n)</p>\n<p>还有一种适用于任何数的幂的朴素解法，当这个数满足mod 2等于0时，就除以2，直到不满足是2的幂，判断最后是不是1。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool isPowerOfTwo(int n) &#123;\n        if(n &lt;&#x3D; 0)&#123;\n            return false;\n        &#125;\n        while(n % 2)\n            n &#x2F;&#x3D; 2;\n   \t\treturn n &#x3D;&#x3D; 1;\n    &#125;</code></pre>\n<h1 id=\"Leetcode-342-4的幂\"><a href=\"#Leetcode-342-4的幂\" class=\"headerlink\" title=\"Leetcode 342 4的幂\"></a>Leetcode 342 4的幂</h1><p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>整数 <code>n</code> 是 4 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 4x</code></p>\n<p><img src=\"../images/image-20230312195034871.png\" alt=\"image-20230312195034871\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool isPowerOfFour(int n) &#123;\n        if(n &lt;&#x3D; 0)\n            return false;\n        return (n &amp; (n-1)) &#x3D;&#x3D; 0 &amp;&amp; (n % 3 &#x3D;&#x3D; 1);\n    &#125;</code></pre>\n","feature":true,"text":"Leetcode 231 2的幂给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。 如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。 bool isPowerOfTwo(int n) &#123;...","link":"","photos":[],"count_time":{"symbolsCount":826,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Leetcode-231-2%E7%9A%84%E5%B9%82\"><span class=\"toc-text\">Leetcode 231 2的幂</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Leetcode-342-4%E7%9A%84%E5%B9%82\"><span class=\"toc-text\">Leetcode 342 4的幂</span></a></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"单调栈","date":"2023-03-18T13:47:14.921Z","updated":"2023-03-18T14:30:23.016Z","comments":true,"path":"api/articles/单调栈.json","keywords":null,"cover":[],"text":"title: 单调栈tags: Leetcode 算法categories: []date: 2023-03-18 21:46:00 原理单调栈常常用于寻找离元素最近的一个比当前值大(小)的元素，若我们需要寻找比当前nums[i]下一个更大的元素，则需要从右往左遍历，由于栈后进先...","link":"","photos":[],"count_time":{"symbolsCount":645,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true},"next_post":{"title":"C++ 类","uid":"a98ce169e82ba10a329e77dc3bdf4dba","slug":"C-类","date":"2023-03-11T08:45:00.000Z","updated":"2023-03-12T05:32:14.870Z","comments":true,"path":"api/articles/C-类.json","keywords":null,"cover":null,"text":"C++ 类​ 类的基本思想是数据抽象和封装，依赖于接口和实现分离的编程技术。用户只能使用接口而无法访问实现部分。 定义一个类​ 定义之前首先我们要设计出这个类，以Sales_data类为例，我们需要有以下接口： 一个isbn成员函数，返回对象的ISBN编号。 一个combine成...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true}}