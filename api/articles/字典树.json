{"title":"字典树(Trie)","uid":"f8c956dcab6a4b279bbeaf03bf015ae7","slug":"字典树","date":"2023-02-22T15:10:00.000Z","updated":"2023-02-23T08:38:05.569Z","comments":true,"path":"api/articles/字典树.json","keywords":null,"cover":null,"content":"<h1 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h1><ul>\n<li>每一个节点都包含一个字符。</li>\n<li>根节点到某一个节点的路径所经过的字符连接起来，就是该节点对应的字符串。</li>\n<li>任意节点的子节点包含的字符不同。</li>\n<li>遇到Terminal Point，说明组成的字符对于当前工作有意义。</li>\n</ul>\n<h1 id=\"用例\"><a href=\"#用例\" class=\"headerlink\" title=\"用例\"></a>用例</h1><ol>\n<li>搜索自动补全</li>\n<li>最长前缀匹配</li>\n<li>词频统计</li>\n</ol>\n<h1 id=\"最基础实现\"><a href=\"#最基础实现\" class=\"headerlink\" title=\"最基础实现\"></a>最基础实现</h1><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Trie &#123;\n    Trie* children[26];\n    bool isEnd;\n    Trie* searchPrefix(string prefix) &#123;\n        Trie* node &#x3D; this;\n        for (char ch : prefix) &#123;\n            ch -&#x3D; &#39;a&#39;;\n            if (node-&gt;children[ch] &#x3D;&#x3D; nullptr) &#123;\n                return nullptr;\n            &#125;\n            node &#x3D; node-&gt;children[ch];\n        &#125;\n        return node;\n    &#125;\n\npublic:\n    Trie() : isEnd(false) &#123;\n        for(int i &#x3D; 0;i &lt; 26;i++)&#123;\n            children[i] &#x3D; nullptr;\n        &#125;\n    &#125;\n\n    void insert(string word) &#123;\n        Trie* node &#x3D; this;\n        for (char ch : word) &#123;\n            ch -&#x3D; &#39;a&#39;;\n            if (node-&gt;children[ch] &#x3D;&#x3D; nullptr) &#123;\n                node-&gt;children[ch] &#x3D; new Trie();\n            &#125;\n            node &#x3D; node-&gt;children[ch];\n        &#125;\n        node-&gt;isEnd &#x3D; true;\n    &#125;\n\n    bool search(string word) &#123;\n        Trie* node &#x3D; this-&gt;searchPrefix(word);\n        return node !&#x3D; nullptr &amp;&amp; node-&gt;isEnd;\n    &#125;\n\n    bool startsWith(string prefix) &#123;\n        return this-&gt;searchPrefix(prefix) !&#x3D; nullptr;\n    &#125;\n&#125;;</code></pre>\n\n\n\n","feature":true,"text":"性质 每一个节点都包含一个字符。 根节点到某一个节点的路径所经过的字符连接起来，就是该节点对应的字符串。 任意节点的子节点包含的字符不同。 遇到Terminal Point，说明组成的字符对于当前工作有意义。 用例 搜索自动补全 最长前缀匹配 词频统计 最基础实现class Tr...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"},{"name":"Leetcode","slug":"Leetcode","count":1,"path":"api/tags/Leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">性质</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">用例</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">最基础实现</span></a></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"mapped":true,"prev_post":{"title":"SQL","uid":"6fc8774f334f99b8964d2d8c2cdc313c","slug":"SQL","date":"2023-02-23T08:48:00.000Z","updated":"2023-02-23T09:08:08.266Z","comments":true,"path":"api/articles/SQL.json","keywords":null,"cover":null,"text":"基于MySQL的极入门笔记简介DB DBMS SQL之间的关系： ​ DB是Data Base，是数据库的缩写，在硬盘上以文件的形式存在。DBMS是Data Base Management System（数据库管理系统）的缩写，例如MySQL、Oracle、DB2等就是一个DBM...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"SQL","slug":"SQL","count":1,"path":"api/tags/SQL.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true},"next_post":{}}