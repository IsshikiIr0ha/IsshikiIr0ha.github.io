{"title":"SQL","uid":"6fc8774f334f99b8964d2d8c2cdc313c","slug":"SQL","date":"2023-02-23T08:48:00.000Z","updated":"2023-02-23T09:08:08.266Z","comments":true,"path":"api/articles/SQL.json","keywords":null,"cover":null,"content":"<h1 id=\"基于MySQL的极入门笔记\"><a href=\"#基于MySQL的极入门笔记\" class=\"headerlink\" title=\"基于MySQL的极入门笔记\"></a>基于MySQL的极入门笔记</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>DB DBMS SQL之间的关系：</p>\n<p>​\t\tDB是Data Base，是数据库的缩写，在硬盘上以文件的形式存在。DBMS是Data Base Management System（数据库管理系统）的缩写，例如MySQL、Oracle、DB2等就是一个DBMS，来管理DB中的数据。而SQL（结构化查询语言）是一种高级语言，编译由DBMS完成。简而言之，DBMS通过执行SQL语句来操作DB中的数据。</p>\n<h3 id=\"表-table\"><a href=\"#表-table\" class=\"headerlink\" title=\"表(table)\"></a>表(table)</h3><p>​\t\t是数据库的基本组成单元，由表组织数据，可读性强。一个表包括行和列。行被称为数据&#x2F;记录，列被称为字段(column)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">学号(int)</th>\n<th>姓名(varchar)</th>\n<th>年龄</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">110</td>\n<td>张三</td>\n<td>20</td>\n</tr>\n<tr>\n<td align=\"left\">120</td>\n<td>李四</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<p>​\t\t字段应该包括字段名、数据类型和相关的约束(例如要求字段不能为空)。例如上表中有学号字段、姓名字段和年龄字段。</p>\n<h3 id=\"SQL语句分类\"><a href=\"#SQL语句分类\" class=\"headerlink\" title=\"SQL语句分类\"></a>SQL语句分类</h3><p>DQL：数据查询语言，查询语句，凡是select语句都是DQL。</p>\n<p>DML：数据操作语言，例如insert delete update语句，对表中<strong>数据</strong>进行增删改。</p>\n<p>DDL：数据定义语言，例如create drop alter语句，对表的<strong>结构</strong>进行增删改</p>\n<p>TCL：事务控制语言，commit提交事务，rollback回滚事务。</p>\n<p>DCL：数据控制语言，例如grant授权，revoke撤销权限。</p>\n<p>程序员在编写SQL语句式，一般将关键字置为大写，其余为小写。</p>\n<h2 id=\"选择语句\"><a href=\"#选择语句\" class=\"headerlink\" title=\"选择语句\"></a>选择语句</h2><p>​\t\tUSE关键字可以用来选择数据库，例如USE sql.store，在Mysql中可以双击来选中数据库。</p>\n<p>​\t\tSELECT  column1,column2…..来选中你想选中的字段。</p>\n<p>又或者是SELECT * 来选择所有字段。</p>\n<p>​\t\tFROM table，来选中你想要选择的表格。可以将SELECT语句和FROM语句放在一行，但当数据库中的数据逐渐变多，这样的会让SQL语句段的可读性变差，所以尽量还是将SQL语句单独分行。也可以直接在FROM语句中指定数据库，例如</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">FROM sql_store.customers</code></pre>\n\n\n\n<p>​\t\tWHERE column1 &#x3D; ***，可以选择字段1中值为对应值的数据。</p>\n<p>​\t\tORDER BY column1 能够以column1为依据对数据进行排序</p>\n<p>​\t\t以下是一段简单的SQL：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">USE sql_store;&#x2F;&#x2F;选择Sql_store这个数据库\nSELECT *  &#x2F;&#x2F;选中sql_store中所有的字段\nFROM customers &#x2F;&#x2F;选中sql_store中的customers表格\nWHERE customer_id &#x3D; 1 &#x2F;&#x2F;选中customer_id为顾客</code></pre>\n\n<p>​\t\t在Windows平台上，Mysql的编译&#x2F;执行快捷键是Ctrl+shift+enter。</p>\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><p>​\t\t如果我们想要从表格中获取指定的字段，可以使用SELECT语句。例如SELECT first_name,last_name,注意，DBMS中字段显示的顺序是与你输入的字段顺序相关的。</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n</tr>\n</thead>\n</table>\n<center>SELECT first_name,last_name</center>\n\n\n\n<table>\n<thead>\n<tr>\n<th>last_name</th>\n<th>first_name</th>\n</tr>\n</thead>\n</table>\n<center>SELECT last_name,first_name</center>\n\n<p>​\t\t在SELECT语句中，可以写入一个关于字段的数学表达式，例如SELECT point + 10，就能列出表格中的point项 + 10后的数据，并且可以用<strong>AS</strong>来给这个新字段取名。例如：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT first_name,point +10 AS &#39;discount price&#39;</code></pre>\n\n<p>​\t\t在这段语句中，<strong>AS</strong>关键字给point + 10这一字段取了一个discount price的别名，使用单引号能够让别称带有空格。</p>\n<p>​\t\t<strong>DISTINCT</strong>关键字能够取出该字段所有的不同数据，舍去重复的数据。</p>\n<p>​\t\tWHERE condition 能够筛选出符合条件的数据，使用关系运算符，需要注意的是，不等于(note equal)可以使用**&lt;&gt;<strong>和</strong>!&#x3D;<strong>来表示，而相等则是</strong>&#x3D;<strong>，如果条件中有字符串，那么字符串需要用</strong>‘  ‘**包含，值得一提的是，日期也需要以字符串来对待，即使他是一串数字，例如’1990-01-02’。</p>\n<p>​\t\t如果有多个条件，那么可以使用逻辑运算符<strong>AND,OR,NOT</strong>，他们的用法显而易见，并且遵循<strong>NOT&gt;AND&gt;OR</strong>的优先级。</p>\n<p>​\t\t<strong>IN</strong>关键字可以简化一串OR条件语句，请看下面的例子：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT * \nFROM customers\nWHERE state &#x3D; &#39;VA&#39; OR state &#x3D; &#39;FL&#39; OR state &#x3D; &#39;GA&#39;\n--不能写成state &#x3D; &#39;VA&#39; OR &#39;FL&#39; OR &#39;GA&#39;的原因是，state &#x3D; &#39;VA&#39;这类语句的结果会得到一个布尔值用于判断，该剧中需要三个布尔值来确定最终值，而state &#x3D; &#39;VA&#39; OR &#39;FL&#39; OR &#39;GA&#39;无法实现。\n--简化后\nSELECT *\nFROM customers\nWHERE state IN(&#39;VA&#39;,&#39;FL&#39;,&#39;GA&#39;)</code></pre>\n\n<p>​\t\t同样的，如果想要得到给定范围之外的结果，只需要在IN前加上<strong>NOT</strong>,例如：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">WHERE state NOT IN(&#39;VA&#39;,&#39;FL&#39;,&#39;GA&#39;)</code></pre>\n\n<p>​\t\t<strong>BETWEEN</strong>关键字可以简化AND语句，该关键字包含临界值。例子如下：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">WHERE points &gt;&#x3D;1000 AND points &lt;&#x3D;3000\n--\nWHERE points BETWEEN 1000 AND 3000</code></pre>\n\n<p>​\t\t如果我们只想要以某个字符或者某个字符串开头的字段数据，又或者是包含某个字符的数据，可以使用<strong>LIKE</strong>关键字。例如：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">WHERE last_name LIKE &#39;b%&#39; \n--姓氏以b开头的数据\nWHERE last_name LIKE &#39;BRUSH%&#39;\n--姓氏以brush开头的数据\nWHERE last_name LIKE &#39;%B%&#39;\n--姓氏中包含b的数据\nWHERE last_name LIKE &#39;%B&#39;\n--姓氏中以B为结尾的数据\nWHERE last_name LIKE &#39;_y&#39;\n--姓氏只包含两个字符并且第二个是y的数据,_代表一个字符。\nWHERE last_name LIKE &#39;b_y&#39;\n--姓氏只包含三个字符并且第一个是b，第三个是y的数据,_代表一个字符。</code></pre>\n\n<p>​\t\t以上的用法是比较古老的寻找包含相应字符串的数据的方法，通过这种方法可以找到任何你想要的数据。</p>\n<p>​\t\t一种新方法，就是使用<strong>REGEXP</strong>，是正则表达式的缩写，允许搜索更复杂的形式。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">WHERE last_name LIKE &#39;%FIELD%&#39;\nWHERE last_name REGEXP &#39;FIELD&#39;\n# 这两个结果是相同的\n\nWHERE last_name REGEXP &#39;field|mac|rose&#39;\n#查找姓氏中含有以上三个任意一个的数据\nWHERE last_name REGEXP &#39;^field|mac|rose&#39;\n#查找姓氏中以field开头或含有后两个任意一个的数据\nWHERE last_name REGEXP &#39;field$|mac|rose&#39;\n#查找姓氏中以field结尾或含有后两个任意一个的数据\nWHERE last_name REGEXP &#39;[gim]e&#39;\n#查找姓氏中含有ge、ie、me的数据,后置方括号同理\nWHERE last_name REGEXP &#39;[a-h]e&#39;\n#查找姓氏中有xe的数据，其中x是a到h的任意一个字母,后置方括号同理，-可以代表范围。</code></pre>\n\n<p>​\t\t有时我们需要搜索缺失某种属性的对象，那么我们可以使用<strong>IS NULL</strong>来查询缺失了某个字段的对象。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">WHERE phone IS NULL \n# phone缺失\nWHERE phone IS NOT NULL \n# phone没有缺失</code></pre>\n\n<p>​\t\t在MySQL中，我们可以通过查看表属性(表旁边的小扳手)来查看表中的字段种类、主键列、数据类型，关系型数据库中，每个表有且只有一个主键列，能够唯一识别表中的记录。默认情况下，表按主键列字段来排序。如果我们想要改变排序规则，那就要使用<strong>ORDER BY</strong>关键字，可以设置多个属性作为排序规则，并且会按文本顺序确定优先级。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ORDER BY first_name &#x2F;&#x2F;对名字进行升序排序\nORDER BY first_name DESC &#x2F;&#x2F; 对名字进行降序排序\nORDER BY state,first_name \n#根据州来排列，相同州根据名字排列，DESC可以插入到你想要的位置</code></pre>\n\n<p>​\t\t在MySQL中，排序的根据不一定是被SELECT的，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT first_name,last_name\nFROM customers\nORDER BY points</code></pre>\n\n<p>​\t\t也可以使用别名进行排序，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT first_name, 10 AS points\nFROM customers\nORDER BY points</code></pre>\n\n<p>​\t\t按列位置排序也是被允许的，但尽量少用,：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT first_name,last_name\nFROM customers\nORDER BY 1,2\n#先按名字排序，再按姓氏排序\n#若\nSELECT birth_date,first_name,last_name\nFROM customers\nORDER BY 1,2\n#先按出生日期排序，再按姓名排序</code></pre>\n\n<p>​\t\t如果我们只想要几个记录，并不需要那么多记录，那么可以使用<strong>LIMIT</strong>语句，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM customers\nLIMIT 3\n# 只需要前三个记录</code></pre>\n\n<p>​\t\t在<strong>LIMIT</strong>语句中，可以增加offset(偏移量),这在数据分页中特别有用，我们常常为了简洁，会在一页中展示固定数量的记录，用法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">LIMIT 6,3 &#x2F;&#x2F;跳过前六条记录，选择三条</code></pre>\n\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p>​\t\t我们常常把不同的记录放在不同表格中，但有时我们需要选中多张表的记录，可以使用<strong>JOIN</strong>，在SQL中有内连接和外连接，例子如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders\nINNER JOIN customers  &#x2F;&#x2F;INNER可以省略\nON orders.customer_id &#x3D; customers.customers_id</code></pre>\n\n<p>​\t\t上述代码能够把两张表以联合顾客ID相同的记录展现出来，也就是，将两张表中顾客ID相同的记录合为一条记录，在这里，我们需要注意二义性的问题，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT customer_id  &#x2F;&#x2F;error不明确是哪张表中的顾客ID\nSELECT orders.customer_id &#x2F;&#x2F; correct\nFROM orders\nINNER JOIN customers  &#x2F;&#x2F;INNER可以省略\nON orders.customer_id &#x3D; customers.customers_id</code></pre>\n\n<p>​\t\t为了简化语句，我们可以给表格起别名，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders o\nINNER JOIN customers c &#x2F;&#x2F;INNER可以省略\nON o.customer_id &#x3D; c.customers_id</code></pre>\n\n<h3 id=\"跨数据库连接\"><a href=\"#跨数据库连接\" class=\"headerlink\" title=\"跨数据库连接\"></a>跨数据库连接</h3><p>​\t\t不仅能够进行内连接，还可以进行跨数据库的连接，只需要在需要被JOIN的表格加上数据库的前缀就能实现,并且只需要给当前未选中的数据库加前缀。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">USE sql_inventory\nSELECT *\nFROM sql_store.orders o\nJOIN customers c \nON o.customer_id &#x3D; c.customers_id</code></pre>\n\n<h3 id=\"自连接\"><a href=\"#自连接\" class=\"headerlink\" title=\"自连接\"></a>自连接</h3><p>​\t\t有的时候需要表与自身连接，例如，表中有公司人员的ID，和他们的管理人员的ID，如果你想要把雇员和管理人员的记录联合起来，那么就需要使用自连接，因为管理人员也是公司的一员,同样，这里也需要注意二义性问题。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">USE sql_hr\nSELECT *\nFROM employees e\nJOIN employees m \nON e.reports_to &#x3D; m.employee_id</code></pre>\n\n<h3 id=\"两表以上的连接\"><a href=\"#两表以上的连接\" class=\"headerlink\" title=\"两表以上的连接\"></a>两表以上的连接</h3><p>​\t\t两表以上的连接，只需要多加一条JOIN语句就行，同样需要注意二义性问题。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders o\nJOIN customers c\n\tON ...condition\nJOIN status s\n\tON ...condition</code></pre>\n\n<h3 id=\"复合连接\"><a href=\"#复合连接\" class=\"headerlink\" title=\"复合连接\"></a>复合连接</h3><p>​\t\t有时一个表中没有一个字段能够唯一识别每条记录，这时候就需要用多条字段来唯一识别每一条记录，在表的设置模式中可以看见有两个主键列。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM order_items oi\nJOIN order_item_notes oin\n\tON oi.order_id &#x3D; oin.order_id\n\tAND oi.product_id &#x3D; oin._product_id</code></pre>\n\n<h3 id=\"隐式连接\"><a href=\"#隐式连接\" class=\"headerlink\" title=\"隐式连接\"></a>隐式连接</h3><p>​\t\t不出现JOIN关键字也能连接两个表，这里需要使用<strong>WHERE</strong>，如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM orders\nINNER JOIN customers  &#x2F;&#x2F;INNER可以省略\nON orders.customer_id &#x3D; customers.customers_id\n---\nSELECT *\nFROM orders o,customers c\nWHERE o.customer_id &#x3D; c.customer_id</code></pre>\n\n<p>​\t\t这两种查询是等价的，但最好少用隐式连接，如果漏了WHERE，会造成交叉连接，意思是，第一个表的每一条记录会逐一连接第二个表的每一条记录。</p>\n<h3 id=\"外连接-OUTER-JOIN\"><a href=\"#外连接-OUTER-JOIN\" class=\"headerlink\" title=\"外连接 OUTER JOIN\"></a>外连接 OUTER JOIN</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\tc.customer_id,\n\tc.first_name,\n\to._order_id\nFROM customers c\nJOIN orders o  &#x2F;&#x2F;有些customer并没有order\n\tON c.customer_id &#x3D; o.customer_id\nORDER BY c.customer_id</code></pre>\n\n<p>​\t\t这种情况会造成记录缺失，因为也许有些顾客没有订单，这些记录就被忽略了，这就需要用外连接，外连接分为左连接和右连接，<strong>LEFT JOIN,RIGHT JOIN</strong>。如果使用左连接，那么不管前一个（左表）表中的记录是否符合ON后的条件，都会被返回。如果使用右连接，所有JOIN的表不管是否符合条件，也都会被返回。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\tc.customer_id,\n\tc.first_name,\n\to._order_id\nFROM customers c\nLEFT JOIN orders o  \n&#x2F;&#x2F;不管customer表中的记录是否符合条件都返回，右连接同理\n\tON c.customer_id &#x3D; o.customer_id\nORDER BY c.customer_id</code></pre>\n\n<h3 id=\"多表外连接\"><a href=\"#多表外连接\" class=\"headerlink\" title=\"多表外连接\"></a>多表外连接</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\tc.customer_id,\n\tc.first_name,\n\to._order_id\nFROM customers c\nLEFT JOIN orders o  \n&#x2F;&#x2F;不管customer表中的记录是否符合条件都返回，右连接同理\n\tON c.customer_id &#x3D; o.customer_id\nLEFT JOIN shippers sh\n\tON o.shipper_id &#x3D; sh.shipper_id\nORDER BY c.customer_id</code></pre>\n\n<p>​\t\t最好不要同时使用两种连接，只选择左连接，增强可读性。</p>\n<h3 id=\"自外连接\"><a href=\"#自外连接\" class=\"headerlink\" title=\"自外连接\"></a>自外连接</h3><p>​\t\t自连接和外连接并不是不能同时出现，相反，有许多场景需要这么做，这时只需要加一个LEFT &#x2F; RIGHT就行。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">USE sql_hr\nSELECT *\nFROM employees e\nLEFT JOIN employees m \n\tON e.reports_to &#x3D; m.employee_id</code></pre>\n\n<h3 id=\"USING语句\"><a href=\"#USING语句\" class=\"headerlink\" title=\"USING语句\"></a>USING语句</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\tc.customer_id,\n\tc.first_name,\n\to._order_id\nFROM customers c\nLEFT JOIN orders o  \n&#x2F;&#x2F;不管customer表中的记录是否符合条件都返回，右连接同理\n\tON c.customer_id &#x3D; o.customer_id\nORDER BY c.customer_id</code></pre>\n\n<p>​\t\t在上面这串代码中，ON后的条件中，选择的两个表的字段都是customer_id，我们可以使用<strong>USING</strong>关键字来简化这一语句,内连接和外连接都可以使用，但只能在两表的字段完全相同时使用。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\tc.customer_id,\n\tc.first_name,\n\to._order_id\nFROM customers c\nLEFT JOIN orders o  \n&#x2F;&#x2F;不管customer表中的记录是否符合条件都返回，右连接同理\n\tUSING (customer_id)\nORDER BY c.customer_id</code></pre>\n\n<p>​\t\t之前我们遇到过复合主键的情况，USING也可以使用，只需要在USING后的括号中加入条件，并用逗号分割就行。如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT *\nFROM order_items oi\nJOIN order_item_notes oin\n\tUSING (order_id,product_id)</code></pre>\n\n<h3 id=\"自然连接\"><a href=\"#自然连接\" class=\"headerlink\" title=\"自然连接\"></a>自然连接</h3><p>​\t\t自然连接是一种非常简便的连接，DBMS会自己看着办，基于共同的列连接,尽量少用。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\to.order_id\n\tc.first_name\nFROM orders o\nNATURAL JOIN customers</code></pre>\n\n<h3 id=\"交叉连接\"><a href=\"#交叉连接\" class=\"headerlink\" title=\"交叉连接\"></a>交叉连接</h3><p>​\t\t意思就是让一个表中的每一条记录都和另一个表中的全部记录连接一次。使用<strong>CROSS JOIN</strong>，在需要排列组合的时候用处很大。</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT \n\to.order_id\n\tc.first_name\nFROM orders o\nCROSS JOIN customers</code></pre>\n\n<p>​\t\t还可以使用隐式交叉连接。例如：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT \n\to.order_id\n\tc.first_name\nFROM orders o,customers c\n</code></pre>\n\n<h3 id=\"联合\"><a href=\"#联合\" class=\"headerlink\" title=\"联合\"></a>联合</h3><p>​\t\t之前所用的连接都是将列连接在一起，同样，在SQL中，也可以让行联合在一起，这需要使用<strong>UNION</strong>,在两段查询语句之间加入UNION就可以了，需要注意的是，指定返回的列数需要相同，并且列名是根据第一段查询来设定的。如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \n\torder_id,\n\torder_date,\n\t&#39;Active&#39; AS status\nFROM orders\nWHERE order_date &gt;&#x3D; &#39;2019-01-01&#39;\nUNION\nSELECT \n\torder_id,\n\torder_date.\n\t&#39;Archived&#39; AS status\nFROM orders\nWHERE order_date &lt; &#39;2019-01-01&#39;</code></pre>\n\n<h3 id=\"列属性\"><a href=\"#列属性\" class=\"headerlink\" title=\"列属性\"></a>列属性</h3><p>​\t\t每一个字段都有自己的数据类型(datatype)，例如,customer_id只接受INT类型的数据，name只接受VARCHAR类型的数据，在数据类型的后面，往往会跟有一个括号，表示这个数据类型最多能够容纳多少位该数据类型，当你的数据不足()中标识的容纳最大量，DBMS会为你自动填充。需要注意的是，一些数据类型不会为你填满，而是认为是可变的(variable)，例如VARCHAR(50),如果你输入5个字符，那就存5个字符，不会占用多余的空间，但如果是CHAR(50),那么DBMS会自动为你填充满50个字符。 </p>\n<p>​\t\t以下是几种常见的列属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>PK(主键)</strong></th>\n<th align=\"center\"><strong>这一列的值能唯一标识每一条记录</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>NN(非空值)</strong></td>\n<td align=\"center\"><strong>这一列不能为空值</strong></td>\n</tr>\n<tr>\n<td align=\"center\">AI(自动递增)</td>\n<td align=\"center\">这一列的数据在插入时会自动递增，常被用于主键列</td>\n</tr>\n<tr>\n<td align=\"center\">DEFAULT</td>\n<td align=\"center\">默认值</td>\n</tr>\n<tr>\n<td align=\"center\">UQ</td>\n<td align=\"center\">唯一索引，每一条记录的UQ字段数据都不同</td>\n</tr>\n<tr>\n<td align=\"center\">ZF</td>\n<td align=\"center\">自动填充0，例如int(4)，输入1会补充为0001</td>\n</tr>\n<tr>\n<td align=\"center\">BIN</td>\n<td align=\"center\">二进制数据</td>\n</tr>\n<tr>\n<td align=\"center\">UN</td>\n<td align=\"center\">标识无符号数</td>\n</tr>\n</tbody></table>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>​\t\t插入单行，需要使用到<strong>INSERT INTO</strong>,<strong>VALUES</strong>关键字，语法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO table\nVALUES (每一列的值，如果启动AI，则可以不用输入该字段)\n----\nINSERT INTO customers \n&#x2F;&#x2F;第一种，将记录中每一个字段的数据逐个列出\nVALUES(DEFAULT,\n      &#39;John&#39;,\n      &#39;Smith&#39;,\n      &#39;1990-01-01&#39;,\n      &#39;NULL&#39;)\n----\nINSERT INTO customers(\n\tfirst_name,\n\tlast_name,\n\tbirth_date,\n    address,\n    city,\n    state)\nVALUES()&#x2F;&#x2F;只需要给上述字段给定数据，按顺序陈列，其他能取默认值的数据都取默认值。</code></pre>\n\n<p>​\t\t插入多行，只需要增加VALUES的括号数量。例如：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">INSERT INTO customers(\n\tfirst_name,\n\tlast_name,\n\tbirth_date,\n    address,\n    city,\n    state)\nVAULES(),\n\t  ()</code></pre>\n\n<p>​\t\t插入分层行，也就是往多张表中插入数据，试想下面一个场景，我们有两个表,order和order_items,order表记录的是订单的顾客，订单号，状态等等，而order_items中包含着订单的具体信息，例如产品号，产品单价等等，一个订单号可以对应order_items中的多个记录，同一个订单号可以对应多个产品，可以想象他们是一对母子关系，这时候就需要往多张表中插入数据。请看以下的代码：</p>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">INSERT INTO orders (customers_id,order_date,status)\nVALUES(1,&#39;1990-01-01&#39;,1)\n&#x2F;&#x2F;这里可以使用MYSQL中的内置函数，LAST_INSERT_ID(),能够返回插入新行时MYSQL生成的ID。\nINSERT INTO order_items\nVALUES(LAST_INSERT_ID(),1,1,2.95),\n\t  (LAST_INSERT_ID(),2,1,3.95)</code></pre>\n\n<h3 id=\"创造-复制表\"><a href=\"#创造-复制表\" class=\"headerlink\" title=\"创造 复制表\"></a>创造 复制表</h3><p>​\t\t如果要把一个表的所有数据复制到另一张表，不用写那么多的INSERT INTO,如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE orders_archived AS\nSELECT * FROM orders</code></pre>\n\n<p>​\t\t这段代码能够创造一张名为ORDER_ARCHIVED的表，并把orders的数据全部复制到这张表中，但当我们打开设计模式的时候，会发现相关的列属性会缺失，例如新表是不存在主键列的，AI也没有启用。我们将SELECT * FROM orders这类语句称为子查询，是部分属于另外一段SQL语句的选择语句，子查询也可以用在INSERT INTO语句下，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO orders_archived\nSELECT * \nFROM orders\nWHERE order_date &lt; &#39;2009-01-01&#39;</code></pre>\n\n<h3 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h3><p>​\t\t更新记录可以使用<strong>UPDATE</strong> 和<strong>SET</strong>关键字，例如</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE invoices\nSET payment_total &#x3D; 10\nWHERE invoice_id &#x3D; 1</code></pre>\n\n<p>​\t\t如果想要更新多行，语法是一样的，但是条件需要更加普遍，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE invoices\nSET \n\tpayment_total &#x3D; invoice_total * 0.5\nWHERE\n\tclient_id &#x3D; 3 &#x2F;&#x2F;所有客户号为3的记录都被更新了\nWHERE client_id IN (3,4) &#x2F;&#x2F;IN关键字也可以使用</code></pre>\n\n<h3 id=\"UPDATE子查询\"><a href=\"#UPDATE子查询\" class=\"headerlink\" title=\"UPDATE子查询\"></a>UPDATE子查询</h3><p>​\t\t子查询一样可以应用在UPDATE中，当你不能直接知道条件的时候，就可以使用子查询，例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE invoices\nSET \n\tpayment_total &#x3D; invoice_total * 0.5\n\tpayment_total &#x3D; due_date\nWHERE client_id &#x3D;\n\t(SELECT client_id\n     FROM clients\n     WHERE name &#x3D; &#39;Myworks&#39;)\n     &#x2F;&#x2F;作为WHERE的条件需要括起来</code></pre>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>​\t\t很简单，但删除数据需要非常小心,同样也可以使用子查询，这里就不再赘述。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM invoices\nWHERE invoice_id &#x3D; 1</code></pre>\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>​\t\t事务具有原子性，不可拆分。例如进行交易，付出去的钱和收到的钱是一样并且是同时进行的。这是事务的一致性。每个事务是不懂其他事务的状态的，这是隔离性，也读不到正在执行中的变化。成功就提交到数据库中保存，这是事务的持久性，ACID。</p>\n<p>​\t\t事务有几个状态。活动状态，是初始状态，执行中。部分提交状态，最后一条语句执行后。失败状态，无法继续执行。终止状态，数据库回到开始之前的状态。最后是提交状态。</p>\n","text":"基于MySQL的极入门笔记简介DB DBMS SQL之间的关系： ​ DB是Data Base，是数据库的缩写，在硬盘上以文件的形式存在。DBMS是Data Base Management System（数据库管理系统）的缩写，例如MySQL、Oracle、DB2等就是一个DBM...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"SQL","slug":"SQL","count":1,"path":"api/tags/SQL.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EMySQL%E7%9A%84%E6%9E%81%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">基于MySQL的极入门笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8-table\"><span class=\"toc-text\">表(table)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">SQL语句分类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">选择语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SELECT\"><span class=\"toc-text\">SELECT</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">内连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">跨数据库连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">自连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E8%A1%A8%E4%BB%A5%E4%B8%8A%E7%9A%84%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">两表以上的连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%90%88%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">复合连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">隐式连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E8%BF%9E%E6%8E%A5-OUTER-JOIN\"><span class=\"toc-text\">外连接 OUTER JOIN</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E5%A4%96%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">多表外连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A4%96%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">自外连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#USING%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">USING语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%84%B6%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">自然连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">交叉连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88\"><span class=\"toc-text\">联合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">列属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">插入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E9%80%A0-%E5%A4%8D%E5%88%B6%E8%A1%A8\"><span class=\"toc-text\">创造 复制表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">更新记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UPDATE%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">UPDATE子查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">删除数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">事务</span></a></li></ol></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"mapped":true,"prev_post":{"title":"网络信息安全","uid":"4eed6726322cbd1240d9eae47dec8b49","slug":"网络信息安全","date":"2023-02-23T08:53:00.000Z","updated":"2023-02-23T09:07:37.301Z","comments":true,"path":"api/articles/网络信息安全.json","keywords":null,"cover":[],"text":"密码学第二章密码学基本术语​ Key：密钥，对加密和解密过程进行控制的参数。 ​ Cipher：加密方法。 ​ Encipher：加密。将明文转换为密文。 ​ Decipher：解密。将密文还原成明文。 ​ Plaintext：明文。 ​ Ciphertext：密文。 ​ 大多数...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"},{"name":"网络安全","slug":"网络安全","count":1,"path":"api/tags/网络安全.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true},"next_post":{"title":"NLP处理层次","uid":"9a8eeb2e28c3ae10efc64a62fe7b0855","slug":"test1","date":"2023-02-22T15:10:00.000Z","updated":"2023-02-23T13:10:50.429Z","comments":true,"path":"api/articles/test1.json","keywords":null,"cover":[],"text":" 输入源一般是语音，文本和图像，语音和图像一般通过语音识别和光学字符识别转换为文本，这一步称为文本处理。 词法分析一般有分词，词性标注和命名实体识别三个步骤，分词是将文本分隔为有意义的词汇，再通过词性标注确定词语类别并消除歧义，再通过命名实体识别标出较长的专有名词。 信息抽取，在...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}}}}