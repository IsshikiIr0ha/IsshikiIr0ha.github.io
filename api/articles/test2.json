{"title":"几道链表简单题","uid":"34f0de872ee3165f6bfb3bec408d89cb","slug":"test2","date":"2023-02-22T15:10:00.000Z","updated":"2023-02-24T16:10:28.608Z","comments":true,"path":"api/articles/test2.json","keywords":null,"cover":null,"content":"<h1 id=\"Leetcode-203-移除链表元素\"><a href=\"#Leetcode-203-移除链表元素\" class=\"headerlink\" title=\"Leetcode 203 移除链表元素\"></a>Leetcode 203 移除链表元素</h1><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p>​        唯一需要思考的点是当删除的元素是第一个元素怎么办。我们可以设置一个虚拟头结点，他的next是原本的头结点。</p>\n<p>难度不大，直接上代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Solution &#123;\npublic:\n    ListNode* removeElements(ListNode* head, int val) &#123;\n        ListNode* dummy &#x3D; new ListNode();\n        dummy-&gt;next &#x3D; head;\n        ListNode* cur &#x3D; dummy;\n        while(cur-&gt;next)&#123;\n            ListNode* rub &#x3D; cur-&gt;next;\n            if(cur-&gt;next-&gt;val &#x3D;&#x3D; val)&#123;\n                cur-&gt;next &#x3D; cur-&gt;next-&gt;next;\n                delete rub;\n            &#125;\n            else&#123;\n                cur &#x3D; cur-&gt;next;\n            &#125;\n        &#125;\n        return dummy-&gt;next;\n    &#125;\n&#125;;</code></pre>\n<h1 id=\"237-删除链表中的结点\"><a href=\"#237-删除链表中的结点\" class=\"headerlink\" title=\"237 删除链表中的结点\"></a>237 删除链表中的结点</h1><p>有一个单链表的 <code>head</code>，我们想删除它其中的一个节点 <code>node</code>。</p>\n<p>给你一个需要删除的节点 <code>node</code> 。你将 <strong>无法访问</strong> 第一个节点 <code>head</code>。</p>\n<p>链表的所有值都是 <strong>唯一的</strong>，并且保证给定的节点 <code>node</code> 不是链表中的最后一个节点。</p>\n<p>删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：</p>\n<ul>\n<li>给定节点的值不应该存在于链表中。</li>\n<li>链表中的节点数应该减少 1。</li>\n<li><code>node</code> 前面的所有值顺序相同。</li>\n<li><code>node</code> 后面的所有值顺序相同。</li>\n</ul>\n<p>本题给出需要删除的节点node,根据单链表的特点，我们无法得到node的前一个节点，根据题目，只需要值删除就行。所以最简单的方法是把node的值与后一个调换，然后正常删除下一个节点。如果删除节点node是最后一个节点，只需要把node设为nullptr即可。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Solution &#123;\npublic:\n    void deleteNode(ListNode* node) &#123;\n        ListNode* cur_next &#x3D; node-&gt;next;\n        int temp &#x3D; cur_next-&gt;val;\n        node-&gt;val &#x3D; temp;\n        node-&gt;next &#x3D; cur_next-&gt;next;\n    &#125;\n&#125;;</code></pre>\n","text":"Leetcode 203 移除链表元素给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 ​ 唯一需要思考的点是当删除的元素是第一个元素怎么办。我们可以设置一个虚拟头结点，他的next是原本...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","count":5,"path":"api/tags/Leetcode.json"},{"name":"链表","slug":"链表","count":3,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Leetcode-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">Leetcode 203 移除链表元素</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">237 删除链表中的结点</span></a></li></ol>","author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"mapped":true,"prev_post":{"title":"NLP处理层次","uid":"9a8eeb2e28c3ae10efc64a62fe7b0855","slug":"test1","date":"2023-02-22T15:10:00.000Z","updated":"2023-02-23T13:10:50.429Z","comments":true,"path":"api/articles/test1.json","keywords":null,"cover":[],"text":" 输入源一般是语音，文本和图像，语音和图像一般通过语音识别和光学字符识别转换为文本，这一步称为文本处理。 词法分析一般有分词，词性标注和命名实体识别三个步骤，分词是将文本分隔为有意义的词汇，再通过词性标注确定词语类别并消除歧义，再通过命名实体识别标出较长的专有名词。 信息抽取，在...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}}},"next_post":{}}