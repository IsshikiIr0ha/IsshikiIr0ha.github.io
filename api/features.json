[{"title":"单调栈","uid":"0614f2a1b2d44b47b9d291cad158b954","slug":"单调栈","date":"2023-03-18T16:40:00.000Z","updated":"2023-03-18T16:42:06.243Z","comments":true,"path":"api/articles/单调栈.json","cover":[],"text":" 原理单调栈常常用于寻找离元素最近的一个比当前值大(小)的元素，若我们需要寻找比当前nums[i]下一个更大的元素，则需要从右往左遍历，由于栈后进先出的特性，nums[i]右边的数会在栈顶。我们需要维持一个递增栈(从栈顶到栈底递增)，保证栈里的数比当前数大，就需要当nums[i]...","link":"","photos":[],"count_time":{"symbolsCount":577,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","count":5,"path":"api/tags/Leetcode.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true},{"title":"几道位运算的题","uid":"115e88fbdb7de27d1adaee0a1c94eec9","slug":"位运算","date":"2023-03-12T11:36:00.000Z","updated":"2023-03-12T12:04:50.915Z","comments":true,"path":"api/articles/位运算.json","cover":[],"text":"Leetcode 231 2的幂给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。 如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。 bool isPowerOfTwo(int n) &#123;...","link":"","photos":[],"count_time":{"symbolsCount":826,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true},{"title":"C++ 类","uid":"a98ce169e82ba10a329e77dc3bdf4dba","slug":"C-类","date":"2023-03-11T08:45:00.000Z","updated":"2023-03-12T05:32:14.870Z","comments":true,"path":"api/articles/C-类.json","cover":null,"text":"C++ 类​ 类的基本思想是数据抽象和封装，依赖于接口和实现分离的编程技术。用户只能使用接口而无法访问实现部分。 定义一个类​ 定义之前首先我们要设计出这个类，以Sales_data类为例，我们需要有以下接口： 一个isbn成员函数，返回对象的ISBN编号。 一个combine成...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"iroha","slug":"blog-author","avatar":"/images/avater.png","link":"/","description":"真不是我想摆烂","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/5325008"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/zhong-ji-pi-pi-61"},"github":{"icon":"/svg/github.svg","link":"https://github.com/IsshikiIr0ha"}}}},"feature":true}]