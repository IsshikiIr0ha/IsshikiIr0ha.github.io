[{"id":"d18f6cf7ec850f9424c2daedf3d5426a","title":"test2","content":"","slug":"test2","date":"2023-02-22T15:10:46.000Z","categories_index":"","tags_index":"","author_index":"iroha"},{"id":"55569e11a71c2cbe7d64e1aa9885d18a","title":"test1","content":"","slug":"test1","date":"2023-02-22T15:10:42.000Z","categories_index":"","tags_index":"","author_index":"iroha"},{"id":"f8c956dcab6a4b279bbeaf03bf015ae7","title":"字典树(Trie)","content":"性质\n每一个节点都包含一个字符。\n根节点到某一个节点的路径所经过的字符连接起来，就是该节点对应的字符串。\n任意节点的子节点包含的字符不同。\n遇到Terminal Point，说明组成的字符对于当前工作有意义。\n\n用例\n搜索自动补全\n最长前缀匹配\n词频统计\n\n最基础实现class Trie &#123;\n    Trie* children[26];\n    bool isEnd;\n    Trie* searchPrefix(string prefix) &#123;\n        Trie* node &#x3D; this;\n        for (char ch : prefix) &#123;\n            ch -&#x3D; &#39;a&#39;;\n            if (node-&gt;children[ch] &#x3D;&#x3D; nullptr) &#123;\n                return nullptr;\n            &#125;\n            node &#x3D; node-&gt;children[ch];\n        &#125;\n        return node;\n    &#125;\n\npublic:\n    Trie() : isEnd(false) &#123;\n        for(int i &#x3D; 0;i &lt; 26;i++)&#123;\n            children[i] &#x3D; nullptr;\n        &#125;\n    &#125;\n\n    void insert(string word) &#123;\n        Trie* node &#x3D; this;\n        for (char ch : word) &#123;\n            ch -&#x3D; &#39;a&#39;;\n            if (node-&gt;children[ch] &#x3D;&#x3D; nullptr) &#123;\n                node-&gt;children[ch] &#x3D; new Trie();\n            &#125;\n            node &#x3D; node-&gt;children[ch];\n        &#125;\n        node-&gt;isEnd &#x3D; true;\n    &#125;\n\n    bool search(string word) &#123;\n        Trie* node &#x3D; this-&gt;searchPrefix(word);\n        return node !&#x3D; nullptr &amp;&amp; node-&gt;isEnd;\n    &#125;\n\n    bool startsWith(string prefix) &#123;\n        return this-&gt;searchPrefix(prefix) !&#x3D; nullptr;\n    &#125;\n&#125;;\n\n\n\n","slug":"字典树","date":"2023-02-22T15:10:00.000Z","categories_index":"","tags_index":"数据结构,Leetcode","author_index":"iroha"}]